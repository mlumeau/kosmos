plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.multiplatform'
    id 'kotlinx-serialization'
}

group = 'xyz.mlumeau.kosmos.kore'
version = 1.0

android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 21
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

def ktor_version = "1.1.3"
def coroutines_version = "1.1.1"
def serialization_version = "0.10.0"

dependencies {
    // Specify Kotlin/JVM stdlib dependency.
    api 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.3.21'
    api 'io.ktor:ktor-client-core:'+ ktor_version
    api 'io.ktor:ktor-client-android:'+ ktor_version
    api 'org.jetbrains.kotlinx:kotlinx-coroutines-core:'+ coroutines_version
    api 'org.jetbrains.kotlinx:kotlinx-serialization-runtime:' + serialization_version
}

kotlin {
    targets {
        fromPreset(presets.android, 'android')

        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'ios') {
            binaries {
                framework('kore') {
                    embedBitcode('disable')
                }
            }
        }
    }

    sourceSets {
        commonMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib-common'
            api 'org.jetbrains.kotlinx:kotlinx-coroutines-core-common:'+ coroutines_version
            api 'io.ktor:ktor-client-core:'+ ktor_version
            api 'org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:' + serialization_version
        }

        iosMain.dependencies {
            implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-native:'+ coroutines_version
            implementation 'io.ktor:ktor-client-core:'+ ktor_version
            implementation 'io.ktor:ktor-client-ios:'+ ktor_version
            implementation 'org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:'+ serialization_version
        }
    }
}

task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.ios.binaries.getFramework("kore", mode)

    inputs.property "mode", mode
    dependsOn framework.linkTask

    from { framework.outputFile.parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}
tasks.build.dependsOn packForXCode